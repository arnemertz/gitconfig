[user]
	email = arnemertz@github.com
	name = Arne Mertz

[core]
	editor = vim
    excludesfile = ~/gitconfig/.gitignore

[alias]
#logs
    lg = !"git lg1"
    lg1 = !"git lg1-specific --all"
    lg2 = !"git lg2-specific --all"
    lg3 = !"git lg3-specific --all"

    lg1-specific = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(cyan)(%ar)%C(reset) %C(white)%<(40,trunc)%s%C(reset) %C(dim white)- %an%C(reset)%C(auto)%d%C(reset)'
    lg2-specific = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(auto)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)'
    lg3-specific = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset) %C(bold cyan)(committed: %cD)%C(reset) %C(auto)%d%C(reset)%n''          %C(white)%s%C(reset)%n''          %C(dim white)- %an <%ae> %C(reset) %C(dim white)(committer: %cn <%ce>)%C(reset)'

    first = "!f() { git log --follow --abbrev-commit --format=format:'%h - (%ar) %s - %an %d' $1 | tail -1; echo \n }; f"

    mine = !"git log --pretty='format:%h%x09%an%x09%ad%x09%s' --author=\"$(git config --get user.name)\""

#
# Working with branches
#

    co = checkout

# Get the current branch name (not so useful in itself, but used in
# other aliases)

    branch-name = "!git rev-parse --abbrev-ref HEAD"

# get upstream branch

    upstream = "!git for-each-ref --format='%(upstream:short)' $(git symbolic-ref -q HEAD)"

# ff-merge the current branch from fetched origin

    ff = "!git merge --ff-only $(git upstream)"

# Push the current branch to the remote "origin", and set it to track
# the upstream branch

    publish = "!git push -u origin $(git branch-name)"

# Delete the remote version of the current branch

    unpublish = "!git push origin :$(git branch-name)"

# push a rebased branch

    pushf = push --force-with-lease

# pull the given branch without checking it out (ff-only)

    sync = "!git fetch origin $1:$1"

# Given a merge commit, find the span of commits that exist(ed) on that
# branch. Again, not so useful in itself, but used by other aliases.

    merge-span = "!f() { echo $(git log -1 $2 --merges --pretty=format:%P | cut -d' ' -f1)$1$(git log -1 $2 --merges --pretty=format:%P | cut -d' ' -f2); }; f"

# Find the commits that were introduced by a merge

    merge-log = "!git log `git merge-span .. $1`"

# Show the changes that were introduced by a merge

    merge-diff = "!git diff `git merge-span ... $1`"

# As above, but in your difftool

    merge-difftool = "!git difftool `git merge-span ... $1`"

# Interactively rebase all the commits on the current branch
#rebase-branch = "!git rebase -i `git merge-base master HEAD`"

#
# Working with files
#

# Unstage any files that have been added to the staging area

    unstage = reset HEAD

# Show changes that have been staged

    diffc = diff --cached

# all files with conflicts

    conflicts = diff --name-only --relative --diff-filter=U

# Logic:
#
# The 'git stash save' fails if the tree is clean (instead of
# creating an empty stash :P). So, we only 'stash' and 'pop' if
# the tree is dirty.
#
# The 'git rebase --whitespace=fix HEAD~' throws away the commit
# if it's empty, and adding '--keep-empty' prevents the whitespace
# from being fixed. So, we first check that the index is dirty.
#
# Also:
# - '(! git diff-index --quiet --cached HEAD)' is true (zero) if
#   the index is dirty
# - '(! git diff-files --quiet .)' is true if the tree is dirty
#
# The 'rebase --whitespace=fix' trick is from here:
# https://stackoverflow.com/a/19156679/470844

fixws = !"\
  if (! git diff-files --quiet .) && \
     (! git diff-index --quiet --cached HEAD) ; then \
    git commit -m FIXWS_SAVE_INDEX && \
    git stash save FIXWS_SAVE_TREE && \
    git rebase --whitespace=fix HEAD~ && \
    git stash pop && \
    git reset --soft HEAD~ ; \
  elif (! git diff-index --quiet --cached HEAD) ; then \
    git commit -m FIXWS_SAVE_INDEX && \
    git rebase --whitespace=fix HEAD~ && \
    git reset --soft HEAD~ ; \
  fi"

# Delete any branches that have been merged into develop
# See also: https://gist.github.com/robmiller/5133264

    delete-merged-branches = "!\
        git fetch -p && git branch --merged develop | grep -v '\\*' | grep -v master | xargs -r -n 1 git branch -d"

[status]
	short = true
	branch = true

[rebase]
	abbreviateCommands = true
